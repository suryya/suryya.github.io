{"version":3,"sources":["utils/localStoreUtils.js","pages/baseball/actionTypes.js","pages/baseball/teamContext.js","components/TextError.js","pages/baseball/composeQuarter.js","pages/baseball/composeTeam.js","utils/ErrorBoundary.js","pages/baseball/index.js","theme/index.js","App.js","index.js"],"names":["asyncLocalStorage","key","value","Promise","resolve","then","localStorage","setItem","getItem","readFromStore","initState","a","savedState","JSON","parse","members","team","positionOptions","saveStateToLocalStorate","state","stringify","writeMiddleware","fn","arg","console","log","readMiddleware","CREATE_TEAM","ACTIONS","ADD_MEMBER","DATA_READY","CountStateContext","React","createContext","CountDispatchContext","useTeamState","context","useContext","undefined","Error","useTeamDispatch","baseballReducer","type","payload","BaseballProvider","children","initData","useRef","useReducer","current","dispatch","useEffect","init","fetchedData","fetchedStoredData","dispatchMiddleware","useCallback","action","newState","matched","filter","mem","fname","lname","toLowerCase","length","e","Provider","memo","props","FormErrorMessage","ComposeTeam","useState","users","setUsers","toast","useToast","formInitValues","setFormInitValues","restoreSavedValues","initValues","map","p","position","memberNames","member","onSubmitCreateTeam","values","actions","reduce","acc","crr","i","setStatus","success","title","description","status","duration","isClosable","setSubmitting","validatTeamMembers","allValues","idx","error","repeatedUsers","user","memberPosition","validatePosition","repeatedPosition","pos","Flex","align","Box","w","h","Heading","as","size","onSubmit","initialValues","enableReinitialize","SimpleGrid","columns","spacingX","spacingY","Fragment","height","name","validate","field","form","FormControl","isInvalid","errors","touched","Select","placeholder","o","component","TextError","ButtonGroup","spacing","Button","variantColor","onClick","resetForm","isLoading","isSubmitting","ComposeQuarter","checkUniqueMember","validationSchema","useMemo","Yup","label","required","test","this","parent","typeError","positive","onSubmitMemberAdd","justify","Input","id","aria-describedby","List","styleType","ErrorBoundary","hasError","info","componentStack","Component","BaseBallTeam","tabIndex","setTabIndex","Tabs","index","onChange","WrappedComponent","WithErrorHandler","customTheme","theme","colors","brand","900","800","700","AppTheme","ThemeProvider","CSSReset","App","className","Helmet","charSet","rel","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac3d303b.chunk.js","sourcesContent":["\n//localStorage wrapped in promise to make it behave \n// like an async API so that same pattern can be followed \n// when local storeage is replaced by API calls or any other \n// async storage\nconst LOCAL_STORE_KEY = 'baseball-team';\nexport const asyncLocalStorage = {\n    setItem: function (key, value) {\n        return Promise.resolve().then(function () {\n            localStorage.setItem(key, value);\n        });\n    },\n    getItem: function (key) {\n        return Promise.resolve().then(function () {\n            return localStorage.getItem(key);\n        });\n    }\n  };\n  \n  // Read from local storage in an async operation\n  export async function readFromStore(initState){\n    let savedState = await asyncLocalStorage.getItem(LOCAL_STORE_KEY)\n    if(savedState){\n      savedState = JSON.parse(savedState)\n    }\n    if(savedState?.members && savedState?.team  && \n       savedState?.positionOptions ){\n      return savedState\n    }else{\n      return initState\n    }\n  }\n  \n  // write to local storage in an async operation\n  export async function saveStateToLocalStorate(state){\n    await asyncLocalStorage.setItem(LOCAL_STORE_KEY,JSON.stringify(state))\n  }\n  \n  //HOC for writing to localstorage    \n  export function writeMiddleware(fn){\n    return async (arg) => {\n      if(typeof fn === 'function'){\n        try{\n          await fn(arg)\n        }catch(e){\n          console.log(e)\n        }\n      }\n      return arg\n    }\n  }\n\n  //HOC for reading from localstorage    \n  export function readMiddleware(fn){\n    return async (arg) => {\n      if(typeof fn === 'function'){\n        try{\n          arg = await fn(arg)\n        }catch(e){\n          console.log(e)\n        }\n      }\n      \n      return arg\n    }\n  }","export default {\n  CREATE_TEAM: 'CREATE_TEAM',\n  ADD_MEMBER: 'ADD_MEMBER',\n  DATA_READY: 'DATA_READY',\n  };\n  ","/*\n* Context API has been used to store the data of the members \n* position and the combination there of which represents the team\n*  \n* The data is stored in local-storage , but the local storage \n* APis has been wrapped into promises to ensure that these \n* read and write operations are compatible to other async storage \n* mediums which can be plugged in later as an enhancment without much \n* change in the code.\n*/\n\nimport React , {useEffect, useCallback, useRef} from 'react'\nimport {readFromStore, saveStateToLocalStorate, \n        writeMiddleware, readMiddleware} from '../../utils/localStoreUtils'\nimport ACTIONS from './actionTypes';\nconst {CREATE_TEAM, ADD_MEMBER, DATA_READY} = ACTIONS;\n\nconst CountStateContext = React.createContext()\nconst CountDispatchContext = React.createContext()\n\n//5 options for position\nconst positionOptions = [\n  'point guard (PG)',\n  'shooting guard (SG)',\n  'power forward (PF)',\n  'small forward (SF)',\n  'the center (C)'\n];\n\n\n//for reading from context\nfunction useTeamState() {\n  const context = React.useContext(CountStateContext)\n  if (context === undefined) {\n    throw new Error('useCountState must be used within a CountProvider')\n  }\n  return context\n}\n\n//for writing to context \nfunction useTeamDispatch() {\n  const context = React.useContext(CountDispatchContext)\n  if (context === undefined) {\n    throw new Error('useCountDispatch must be used within a CountProvider')\n  }\n  return context\n}\n\n//base reducer which updates state with the paylaod\n// the main business logic has been shifted to a middleware \n// for supporing async ooperations prior to state write / update\nfunction baseballReducer(state, {type,payload}) {\n  switch (type) {\n    default: {\n      return {...state,...payload}\n    }\n  }\n}\n\n//the root provider component with the context of baseball team \n//this will be used to wrap around all the baseball related components\n//to ensure all those child components can read and write from the store\nfunction BaseballProvider({children}) {\n\n  //empty store structure\n  const initData =  useRef({members: [],team:[],positionOptions})\n  const [state, dispatch] = React.useReducer(baseballReducer,initData.current)\n\n  //fetches the data stored in local storage \n  useEffect( () => {\n    const fetchedStoredData = async function(init){\n      let fetchedData = await readMiddleware(readFromStore)(init)\n      dispatch({\n        type: DATA_READY,\n        payload: fetchedData\n      });\n    }\n    fetchedStoredData(initData.current)\n  }, [initData]);\n\n  //middleware which contains the business logic to recreate the state based on the \n  //action type , action paylaod and the previous state\n  const dispatchMiddleware = useCallback((dispatch) => {\n    return  (action) => {\n      let newState;\n      switch (action.type) {\n        case ADD_MEMBER:\n          let matched = state.members.filter((mem) => (`${mem.fname}${mem.lname}`).toLowerCase() === \n                                                       (`${action.payload.fname}${action.payload.lname}`).toLowerCase() )\n          if(matched && matched.length){\n            newState =  {...state}\n          }\n          newState = {...state,...{members: [...state.members,...[action.payload]]}}\n           writeMiddleware(saveStateToLocalStorate)(newState).then(()=>{\n            dispatch({type:action.type,payload:newState})\n           },(e)=>console.log('Failed writing to store'))\n          break;\n        case CREATE_TEAM:\n           newState = {...state,...{team:action.payload}}\n           writeMiddleware(saveStateToLocalStorate)(newState).then(()=>{\n              dispatch({type:action.type,payload:newState})\n           },(e)=>console.log('Failed reading from store'))\n          break;\n        default:\n          throw new Error(`Unhandled action type: ${action.type}`)\n      }\n    };      \n  },[state])\n  \n\n  return (\n    <CountStateContext.Provider value={state}>\n      <CountDispatchContext.Provider value={dispatchMiddleware(dispatch)}>\n        {children}\n      </CountDispatchContext.Provider>\n    </CountStateContext.Provider>\n  )\n}\n\n\nexport {BaseballProvider, useTeamState, useTeamDispatch }\n","import React from 'react'\n\nimport {FormErrorMessage} from \"@chakra-ui/core\";\n\nfunction TextError (props) {\n  return <FormErrorMessage {...props}>{props.children}</FormErrorMessage>\n\n}\n\nexport default React.memo(TextError)\n","/*\n* The first quarter form renders the prevously selected values for members\n* and respective spositions if they were saved previously\n* It  first quarter form was not saved previously it renders empty form\n*/\nimport React, { useEffect, useState , useCallback } from 'react';\nimport {Box, FormControl, Select , ButtonGroup, Button, SimpleGrid ,useToast, Heading, Flex } from \"@chakra-ui/core\";\nimport {useTeamState, useTeamDispatch} from './teamContext';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TextError from '../../components/TextError'\nimport ACTIONS from './actionTypes';\nconst {CREATE_TEAM} = ACTIONS;\n\nexport default function ComposeTeam() {\n\n    //context updater handle\n    const dispatch = useTeamDispatch()\n\n    //Data fetched from context store\n    const {members,team,positionOptions} = useTeamState()\n\n    const [users,setUsers] = useState([]);\n    const toast = useToast();\n    const [formInitValues,setFormInitValues] = useState({});\n    \n\n    //updates the form data container with the values from context store\n    // based on positionOptions and team\n    const restoreSavedValues = useCallback((team,positionOptions) => {\n            \n            let initValues = {users:positionOptions.map((p) => team?.[p] ?? ''), \n                              position:positionOptions.map((p) => team?.[p] ? p : '')}\n            setFormInitValues(initValues)        \n    },[])\n\n    //forms the list of team members which will be shown as dropdown options\n    useEffect(\n        () => {\n          let memberNames = members?.length && members.map(member => `${member.fname} ${member.lname}`);\n          setUsers(memberNames)\n        },\n    [members]);\n\n    //trigger restoreSavedValues when dependencies change\n    useEffect(\n        () => {\n            restoreSavedValues(team,positionOptions)\n        },\n    [team,positionOptions,restoreSavedValues]);\n\n    //Form submit handler , creates the JSON to be stored in context store and calls dispatch\n    const onSubmitCreateTeam = useCallback((values, actions) => {\n\n        let payload = values.position.reduce((acc,crr,i) => ({...acc,...{[crr]:values.users[i]}}) ,{});\n        dispatch({type:CREATE_TEAM,payload})\n        actions.setStatus({success: true})    \n        toast({\n            title: \"Success\",\n            description: \"Team successfully created\",\n            status: \"success\",\n            duration: 2000,\n            position: \"top-right\",\n            isClosable: true,\n            })\n        actions.setSubmitting(false);\n\n      }, [dispatch,toast]);\n\n    //Validate slected team member as per the constraints\n    const validatTeamMembers = useCallback((value,allValues,idx) => {\n        let repeatedUsers = allValues.users.filter((user) => user && user === value).length > 1 ? true : false;\n        let error;\n        if (!value) {\n          error = \"Team Member is required\";\n        } else if (repeatedUsers && allValues.users[idx] === value) {\n          error = \"Team member can't be repeated\";\n        }else if(allValues.position[idx] && allValues.users[idx] === value){\n            let memberPosition;\n            error = members.filter((member) => {\n                memberPosition = `${member.fname} ${member.lname}` === value ?  member.position : memberPosition;\n                return `${member.fname} ${member.lname}` === value && member.position === allValues.position[idx]\n            })?.length === 0  ? `Member's position is \"${memberPosition}\" , it doesn't match the selected one` : undefined;\n        }        \n\n        return error;\n    },[members]);\n\n    //Validate slected position as per the constraints\n    const validatePosition = useCallback((value,allValues,idx) => {\n        let repeatedPosition = allValues.position.filter((pos) => pos && pos === value).length > 1 ? true : false;\n        let error;\n        if (!value) {\n          error = \"Position is required\";\n        } else if (repeatedPosition && allValues.position[idx] === value) {\n          error = \"Position can't be repeated\";\n        }else if(allValues.users[idx] && allValues.position[idx] === value){\n            error = members.filter((member) => {\n                return `${member.position}` === value && `${member.fname} ${member.lname}` === allValues.users[idx]\n            })?.length === 0  ? `Selcted position does not match that of the selected member's` : undefined;\n        }\n        return error;\n    },[members]);\n\n    return (\n        <Flex align=\"center\">\n\n            <Box w=\"70%\"  h=\"10\">\n\n                        <Heading as=\"h4\" size=\"md\"  p={4} >\n                            Compose bsae ball team\n                        </Heading>\n                        <Formik onSubmit={onSubmitCreateTeam} \n                                initialValues={formInitValues} \n                                enableReinitialize>\n                            {props => (\n                                <Form >\n                                    <Box w=\"100%\" p={4} >\n                                    <SimpleGrid  columns={2} spacingX=\"40px\"  spacingY=\"20px\">\n                                        {positionOptions?.length && positionOptions.map((pos,i) => {\n                                            return (\n                                            <React.Fragment key={pos}>\n                                                <Box height=\"80px\">\n                                                    \n                                                    <Field name={`users[${i}]`} validate={(value) => validatTeamMembers(value,props.values,i)}>\n                                                        {({ field, form }) => (\n                                                                <FormControl  isInvalid={form.errors?.users?.[i] && form.touched?.users?.[i]}>\n                                                                <Select  {...field} placeholder=\"Choose Member\">\n                                                                    {users?.length && users.map(o => {\n                                                                        return <option key={o} value={o}>{o}</option>\n                                                                    })}\n                                                                </Select>\n                                                                <ErrorMessage component={TextError}name={`users[${i}]`} />\n                                                                \n                                                                </FormControl>\n                                                        )}\n                                                    </Field>\n                                                </Box>\n\n                                                <Box height=\"80px\">\n                                                    <Field  name={`position[${i}]`} validate={(value) => validatePosition(value,props.values,i)}>\n                                                        {({ field, form }) => (\n                                                                <FormControl   isInvalid={form.errors?.position?.[i] && form.touched?.position?.[i]}>\n                                                                <Select  {...field} placeholder=\"Choose Position\">\n                                                                    {positionOptions?.length && positionOptions.map(o => {\n                                                                        return <option key={o} value={o}>{o}</option>\n                                                                    })}\n                                                                </Select>\n                                                                <ErrorMessage component={TextError}name={`position[${i}]`} />\n                                                                \n                                                                </FormControl>\n                                                        )}\n                                                    </Field>\n                                                </Box>\n                                            </React.Fragment>\n                                        )})}\n\n                                        <Box height=\"70px\">\n                                            <FormControl >\n                                                <ButtonGroup spacing={4}>\n                                                    <Button variantColor=\"gray\" size=\"md\" type=\"reset\" onClick={() => props.resetForm(formInitValues)}>\n                                                        Reset\n                                                    </Button>\n                                                    <Button variantColor=\"blue\" size=\"md\" isLoading={props.isSubmitting} type=\"submit\">\n                                                        Save\n                                                    </Button>\n                                                </ButtonGroup>\n                                            </FormControl>\n                                        </Box>\n\n                                    </SimpleGrid>\n                                    </Box>\n\n                                </Form>\n                            )}\n                        </Formik>\n            </Box>\n\n        </Flex>\n\n    );\n  }\n","import React,  {useCallback,useRef} from 'react';\n\nimport { Box, FormControl, Input, \n         Select , ButtonGroup, Button, SimpleGrid ,\n         useToast , List , ListItem  , Flex, Heading} from \"@chakra-ui/core\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport {useTeamState, useTeamDispatch} from './teamContext';\nimport TextError from '../../components/TextError'\nimport * as Yup from 'yup'\nimport ACTIONS from './actionTypes';\n\nconst {ADD_MEMBER} = ACTIONS;\n\nexport default function ComposeQuarter() {\n    \n    //context updater handle\n    const dispatch = useTeamDispatch()\n\n    //Data fetched from context store\n    const {members,positionOptions} = useTeamState()\n    const toast = useToast();\n    \n    //Initialize object to represent the form structure \n    const formInitValues =  useRef({  fname:'' , \n                                lname:'' , \n                                height:'', \n                                position:'' });\n\n    //check the first and last name of the team member against the \n    //previously entered team members to ensure no duplicate names are entered\n    const checkUniqueMember = useCallback((values) => {\n        let matched = members.filter((mem) => (`${mem.fname}${mem.lname}`).toLowerCase() \n                                                === (`${values.fname}${values.lname}`).toLowerCase());\n        return (matched && matched.length) ? false : true;\n    },[members])\n\n    //Yup form validation schema\n    const validationSchema = React.useMemo(() => Yup.object({\n        fname: Yup\n          .string()\n          .label('First name')\n          .required()\n          .test('is-alpha', 'First name should contain characters only', function(value) {\n            return (/^[A-Za-z\\s]+$/.test(value))\n          })\n          .test('unique-name', 'Name should be unique', function(value) {\n            return checkUniqueMember({fname:value,lname:this.parent.lname})\n          }),\n        lname: Yup\n          .string()\n          .label('Last name')\n          .required()\n          .test('is-alpha', 'Last name should contain characters only', function(value) {\n            return (/^[A-Za-z\\s]+$/.test(value))\n          })\n          .test('unique-name', 'Name should be unique', function(value) {\n            return checkUniqueMember({lname:value,fname:this.parent.fname})\n          }),\n        height: Yup\n          .number()\n          .typeError('Height must be a number')\n          .label('Height')\n          .required()\n          .positive('should be a positive number'),\n        position: Yup\n          .string()\n          .label('Position')\n          .required()\n    }),[checkUniqueMember]);\n\n\n    //Form submit handler for adding new member to the list \n    const onSubmitMemberAdd = useCallback((values, actions) => {\n        \n            dispatch({type:ADD_MEMBER,payload:values})\n            actions.resetForm(formInitValues.current)\n            actions.setStatus({success: true})    \n            toast({\n                title: \"Success\",\n                description: \"Added team member successfully\",\n                status: \"success\",\n                duration: 2000,\n                position: \"top-right\",\n                isClosable: true,\n              })\n            actions.setSubmitting(false);\n\n    }, [dispatch,toast,formInitValues]);\n\n\n    return (\n\n            <Flex align=\"center\">\n                <Flex size=\"65%\" align=\"center\" justify=\"center\">\n\n                    <Box w=\"100%\" h=\"10\">\n                        <Heading as=\"h4\" size=\"md\" p={4} >\n                            Enter team member details\n                        </Heading>\n                        <Formik\n                                initialValues={formInitValues.current}\n                                onSubmit={onSubmitMemberAdd}\n                                validationSchema={validationSchema}>\n                                \n                                {props => (\n                                    <Form>\n                                        <Box w=\"100%\" p={4} >\n\n                                        <SimpleGrid columns={1} spacing={10}>\n                                            <Box height=\"40px\">\n                                                <Field name=\"fname\" >\n                                                        {({ field, form }) => (\n\n                                                            <FormControl  isInvalid={form.errors.fname && form.touched.fname}>\n                                                                <Input  {...field} type=\"text\" id=\"f-name\" aria-describedby=\"Enter first name\"  \n                                                                        placeholder=\"First Name\"/>\n                                                                <ErrorMessage id=\"first-name-helper-text\" component={TextError} name=\"fname\" />\n                                                            </FormControl>\n\n                                                        )}\n                                                </Field>\n                                            </Box>\n\n\n                                            <Box height=\"40px\">\n                                                <Field name=\"lname\">\n                                                {({ field, form }) => (\n\n                                                    <FormControl   isInvalid={form.errors.lname && form.touched.lname}>\n                                                        <Input  {...field} type=\"text\" id=\"l-name\" aria-describedby=\"Enter last name\"  \n                                                            placeholder=\"Last Name\"/>\n                                                        <ErrorMessage id=\"last-name-helper-text\" component={TextError} name=\"lname\" />\n                                                    </FormControl>\n\n                                                )}\n                                                </Field>\n                                            </Box>\n\n                                            <Box height=\"40px\">\n                                                <Field name=\"height\">\n                                                {({ field, form }) => (\n\n                                                    <FormControl isInvalid={form.errors.height && form.touched.height}>\n                                                        <Input  {...field} type=\"text\" id=\"l-height\" aria-describedby=\"Enter height in cm*\"  \n                                                                placeholder=\"Height in cm\"/>\n                                                        \n                                                        <ErrorMessage id=\"height-helper-text\" component={TextError} name=\"height\" />\n                                                    </FormControl>\n                                                )}\n                                                </Field>\n                                            </Box>\n\n\n                                            <Box height=\"40px\">\n                                                <Field name=\"position\">\n                                                {({ field, form }) => (\n                                                        <FormControl   isInvalid={form.errors.position && form.touched.position}>\n                                                        <Select  {...field} placeholder=\"Choose Position\">\n                                                            {positionOptions?.length && positionOptions.map(o => {\n                                                                return <option key={o} value={o}>{o}</option>\n                                                            })}\n                                                        </Select>\n                                                        <ErrorMessage id=\"email-helper-text\" component={TextError} name=\"position\" />\n                                                        </FormControl>\n                                                )}\n                                                </Field>\n                                            </Box>\n\n\n                                            <Box height=\"70px\">\n                                                <FormControl >\n                                                    <ButtonGroup spacing={4}>\n                                                        <Button variantColor=\"gray\" size=\"md\" type=\"reset\" onClick={() => props.resetForm(formInitValues.current)}>\n                                                            Reset\n                                                        </Button>\n                                                        <Button variantColor=\"blue\" size=\"md\" isLoading={props.isSubmitting} type=\"submit\">\n                                                            Save\n                                                        </Button>\n                                                    </ButtonGroup>\n                                                </FormControl>\n                                            </Box>\n\n                                        </SimpleGrid>\n\n                                        </Box>\n\n                                                \n                                    </Form>\n                                )}\n\n                            </Formik>\n\n                    </Box>\n\n                </Flex>\n\n               {/*This section is to display the list of members already added to the list*/}\n                <Flex size=\"35%\" align=\"center\" justify=\"center\">\n\n                    <Box w=\"100%\" h=\"10\" p={8} > \n                            {(members.length > 0) && \n                                <>\n                                    <Heading as=\"h4\" size=\"md\">\n                                        List of existing team members\n                                    </Heading>\n\n                                    <List as=\"ol\" styleType=\"decimal\">\n                                        {members?.map((member,i) => <ListItem key={`${i}`}>{member.fname} {member.lname}</ListItem>)}   \n                                    </List>\n                                </>\n                            }\n                    </Box>\n                </Flex>\n                \n            </Flex>\n\n    );\n  }","import React from 'react';\n\nexport class ErrorBoundary extends React.Component {\n    state = { hasError: false };\n  \n    static getDerivedStateFromError(error) {\n      return { hasError: true };\n    }\n  \n    componentDidCatch(error, info) {\n      console.log('componentStack:',info.componentStack);\n      console.log('error:',info.error);\n    }\n  \n    render() {\n      if (this.state.hasError) {\n        return <h1>Something went wrong.</h1>;\n      }\n  \n      return this.props.children; \n    }\n  }\n\n\nconst WithErrorHandler = (WrappedComponent) => {\n    \n    class HOC extends React.Component {\n      render() {\n        return (<ErrorBoundary>\n                  <WrappedComponent />\n                </ErrorBoundary>)\n      }\n    }\n    return HOC;\n  };\n\nexport default WithErrorHandler","import React from 'react';\nimport { Tabs, TabList, TabPanels, Tab, TabPanel, Box } from \"@chakra-ui/core\";\nimport ComposeQuarter from './composeQuarter';\nimport ComposeTeam from './composeTeam';\nimport {BaseballProvider} from './teamContext';\nimport WithErrorHandler from '../../utils/ErrorBoundary'\n\n\nexport function BaseBallTeam() {\n    const [tabIndex, setTabIndex] = React.useState(0);\n  \n  \n    const handleTabsChange = index => {\n      setTabIndex(index);\n    };\n  \n    return (\n      <Box w=\"100%\" p={4} >\n        \n        <Tabs index={tabIndex} onChange={handleTabsChange}>\n          <TabList>\n            <Tab>Compose Team</Tab>\n            <Tab>First Quarter</Tab>\n\n          </TabList>\n          <BaseballProvider>\n            <TabPanels>\n                <TabPanel>\n                    <ComposeTeam/>\n                </TabPanel>\n                <TabPanel>\n                    <ComposeQuarter/>\n                </TabPanel>\n            </TabPanels>\n          </BaseballProvider>\n\n        </Tabs>\n      </Box>\n    );\n  }\n\n  export default WithErrorHandler(BaseBallTeam) ","import { theme, ThemeProvider , CSSReset } from \"@chakra-ui/core\";\nimport React from \"react\";\n\n// Let's say you want to add custom colors\nexport const customTheme = {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    brand: {\n      900: \"#1a365d\",\n      800: \"#153e75\",\n      700: \"#2a69ac\",\n    },\n  },\n};\n\nconst AppTheme = function({children}){\n    return <ThemeProvider theme={customTheme}>\n            <CSSReset />\n            {children}\n           </ThemeProvider>;\n}\n\nexport default AppTheme","import React from 'react';\nimport {BaseBallTeam} from './pages/baseball'\nimport { Helmet } from \"react-helmet\";\nimport AppTheme from './theme';\n\n\nfunction App() {\n  return (\n    <AppTheme>\n      <div className=\"App\">\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>Baseball Team App</title>\n          <link rel=\"canonical\" href=\"https://reactjs.org/\" />\n        </Helmet>\n        <header className=\"App-header\">\n        </header>\n        <main>\n          <BaseBallTeam/>\n        </main>\n      </div>\n    </AppTheme>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n//import AppTheme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();"],"sourceRoot":""}